1. Неочевидный комментарий. Изменил на "Вознаграждение менеджера за продажу".
/**
 * Логика над вознаграждениями.
 */
class Rewards extends RewardsAR implements RewardsStatusInterface {

2. Думаю, комментарий неочевидный либо на скорую руку.
   Изменил комментарий на "Успешно ли завершилось сохранение модели"
/**
 * @param Rewards $reward
 * @return bool false только при ошибке сохранения. Даже если модель не должна сохраняться, регистрация означает и запуск проверок в том числе.
 */
public static function RegisterReward(self $reward):bool {

3. Комментирование очевидного. Убрал комментарий.

class RewardsBonuses {
    /**
	 * Возвращает текущий статус премии
	 */
	public function getCurrentStatus():int {
}

4. Нелокальная информация. Исправил комментарий на "Токен после верификации пользователя по смс".

class Sellers {

    /**
	 * После первой регистрации дол возвращает проверочный токен
	 * который надо передать в метод подтверждения смс
	 * отдаем его на фронт
	 */
	protected ?string $verificationSmsToken = null;
}

5. Избыточный комментарий. Добавил комментарий к классу "Сервис регистрации продавцов" и убрал комментарий у метода.

class SellersRegistrationService {

    /**
	 * Внутренняя регистрация пользователя, о котором мы знаем только телефонный номер.
	 * Например, номер продавца в контракте из DOL
	 *
	 * Сценарий НЕ СООБЩАЕТ о существовании пользователя/продавца, он регистрирует новые записи, а проверка ДОЛЖНА
	 * выполняться вызывающими методами.
	 */
	public static function registerByPhone(string $phoneNumber):?Sellers {

}

6. Недостоверный и путающий комментарий.
   Переименовал в isRequireWithDraw и исправил комментарий на "Требуется ли розыгрыш".

// Баланс продавца
class SellersBalance {

    /**
	 * Отправка запроса во внешний сервис для вывода баланса
	 */
	private function requireWithdraw():bool {
        return $this->is_require_with_draw;
    }
}

7. Избыточный комментарий. Убрал. Из названия понятно, что возвращается кол-во.

// Баланс продавца
class SellersBalance {

    /**
	 * Получение кол-ва бонусов для изменения баланса с учетом валидации
	 */
	private static function quantity(Rewards $reward, Users $users):float {

}

8. Избыточный комментарий. Из названия метода понятно, что он делает.

// Баланс продавца
class SellersBalance {

    /**
	 * Получение текущей суммы c учётом валидации. Предполагается использовать её при работе с балансом
	 */
	public function getCurrentSum():?string {

}

9. Избыточный комментарий и сложный. Убрал комментарий и переименовал метод в isManager.

class SellersBalanceValidate {

    /**
	 * Продавец не должен быть одновременно менеджером.
	 * Если продавец является менеджером в любой точке, то бонусы не начисляются
	 * @return bool
	 */
	public function isNotManager():bool {

}

10. Нелокальная информация. Перенес комментарий в модель статуса баланса продавца.
    Комментарий у метода убрал.

class SellersBalanceValidate {

    /**
	 * Продавец должен быть активным для начисления бонусов
	 * - не заблокирован
	 * - не ограничен
	 * - не приостановлен
	 */
	public function isActive():bool {

}

11. Слишком много информации.
    Из кода понятно, что это константы.
    Уменьшил комментарии, переименовал константы в:
    AVAILABLE_FOR_WITHDRAWAL = 1; // Доступны для вывода
    NOT_AVAILABLE_FOR_WITHDRAWAL = 2; // Недоступны для вывода

class SellersBalanceJournal {

    /**
	 * Константы приходных операции.
	 * INCOME - Бонусы поступили, доступны для вывода.
	 * FREEZE - Бонусы поступили, не доступны для вывода
	 */
	public const DIRECTION_INCOME = 1;
	public const DIRECTION_FREEZE = 2;

}

12. Избыточный комментарий, неактуальная информация (Возвращается уже модель, а не массив).
    Удалил комментарий.

// Сервис Мини-продавцов
class MiniSellerService {

    /**
	 * Подтверждение по СМС после регистрации.
	 * Возвращает массив токенов в случае успеха, пустой массив если произошла ошибка
	 */
	public function confirmSmsAfterRegister(ConfirmSmsAfterRegisterForm $form):Sellers {

}

13. Комментарий метода избыточный и нелокальная информация (какие методы для вывода сейчас доступны).
    Убрал комментарий.

interface CashingInterface {

	/**
	 * Вывод денег. Пока что можно выводить на счёт в банке или на карту банка.
	 * @param int $amount Сумма для вывода
	 */
	public function cashOut(int $amount):bool;
}

14. Путающий комментарий. Убрал комментарий и переименовал в checkCorrectTransferState.

interface CashingInterface {

	/**
	 * Проверка статуса перевода, если источник поддерживает.
	 * Мы еще не знаем какие параметры нужны. И что будет возвращать.
	 */
	public function paymentState():void;
}

15. Путающий комментарий из-за некорректного названия метода.
    Убрал комментарий, переименовал метод в getCountFinishedValidators

/**
  * Вернуть количество валидаторов с окончательной валидацией
  */
protected static function GetValidCount(int $reward_id, int $bonus_id, ?bool $valid = null):int {